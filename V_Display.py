# -*- coding: utf-8 -*-

"""
Module implementing MainWindow.
"""

from PyQt4 import QtCore, QtGui
from PyQt4.QtGui import QMainWindow
from PyQt4.QtCore import pyqtSignature
from PyQt4.QtCore import QTimer,  SIGNAL, SLOT, Qt,  QRect
from PyQt4.QtGui import QPainter, QRegion, QPen
import sys, random
from struct import unpack
from Utilities import *
from collections import deque
from generate_sin import gen as gen_sin
from generate_tri import gen as gen_tri
from generate_spikes import spike_train
from generate_sequence import gen as gen_ramp
from generate_nasir16s import gen as gen_wave
from generate_min_jerk import gen as gen_jerk
#from generate_from_file import gen as gen_from_file
from functools import partial
from math import floor
from glob import glob
import numpy as np
import os.path as path


PIXEL_OFFSET = 200 # pixels offsets
BUTTON_INPUT_FROM_TRIGGER = 1

from Ui_V_Display import Ui_Dialog
import time


class CtrlChannel:
    def __init__(self, hostDialog, id, name, type, value = 0.0):
        exec interp('self.currVal = #{value}')
        self.type = type
        self.id = id
        self.defaultValue = value

        self.doubleSpinBox = QtGui.QDoubleSpinBox(hostDialog)
        self.doubleSpinBox.setStyleSheet("background-color: rgb(255, 255, 255);"
                                        "border:1px solid rgb(100, 200, 255);"
                                        "max-width: 90px;"
                                        "max-height: 20px;")
                                        #"border-left: 1px solid none;"
                      # "border-right: 1px solid none; border-bottom: 1px solid black; width: 0px; height: 0px;")
        SPINBOX_VOFFSET = 130
        SPINBOX_HOFFSET = 650  # was 180
        self.doubleSpinBox.setGeometry(QtCore.QRect(SPINBOX_HOFFSET + 620, SPINBOX_VOFFSET+ id * 30, 205, 30))
        self.doubleSpinBox.setSingleStep(0.000001)
        self.doubleSpinBox.setDecimals(7)
        self.doubleSpinBox.setMaximum(1000000.0)
        self.doubleSpinBox.setMinimum(-1000000.0)
        self.doubleSpinBox.setProperty("value", value)
        self.doubleSpinBox.setObjectName("param_"+name)


        self.label = QtGui.QLabel(hostDialog)
        self.label.setObjectName("label_"+name)
        self.label.setText(name)
        self.label.setGeometry(QtCore.QRect(SPINBOX_HOFFSET + 510, SPINBOX_VOFFSET+ id * 30, 105, 30))    
  
    
class ViewChannel:
    def __init__(self, hostDialog, name, id, width = 2, color = Qt.blue, addr = 0x20, type = ""):
        self.id = id
        self.width = width
        self.color = color
        self.vscale = 0.0
        self.yoffset = 1.0
        self.addr = addr
        self.type = type

        self.data = deque([0]*100, maxlen=100)
        self.slider = QtGui.QSlider(hostDialog)
        self.slider.setGeometry(QtCore.QRect(100, 70+ id*80, 29, 80))
        self.slider.setOrientation(QtCore.Qt.Vertical)
        self.slider.setObjectName("gain_"+name)

        self.label = QtGui.QLabel(hostDialog)
        pal = self.label.palette()
        pal.setColor( QtGui.QPalette.Foreground, color )
        self.label.setPalette(pal)
        self.label.setObjectName("label_"+name)
        self.label.setText(name)
        self.label.setGeometry(QtCore.QRect(10, 70+ id*80, 120, 100))
        self.label.show()
        
        self.labelnum = QtGui.QLabel(hostDialog)
        palnum = self.labelnum.palette()
        palnum.setColor( QtGui.QPalette.Foreground, color )
        self.labelnum.setPalette(pal)
        self.labelnum.setObjectName("label_"+name)
        self.labelnum.setText(name)
        self.labelnum.setGeometry(QtCore.QRect(120, 70+ id*80, 80, 100))
        self.labelnum.show()  



def onVisualSlider(self, whichCh, value = -1):
    if value == -1: value = self.allFpgaOutput[whichCh].slider.value()
    self.allFpgaOutput[whichCh].vscale = value * 0.5   
    print "VisualGain of ", whichCh, " is now ", value


def onNewWireIn(self, whichCh, value = -1):
    if value == -1: 
        value = self.allUserInput[whichCh].doubleSpinBox.value()         
    self.tellFpga(whichCh, value)
    #self.tellWhichFpga(0, whichCh, value)
    print "board",  whichCh, " is now ", value



class View(QMainWindow, Ui_Dialog):
    """
    Class View inherits the GUI generated by QtDesigner, and add customized actions
    """
    def __init__(self, count, projectName,  projectPath,  nerfModel,  fpgaOutput= [], userInput = [],  parent = None):
        """
        Constructor
        """
        self.nerfModel = nerfModel
#        QMainWindow.__init__(self, parent, Qt.FramelessWindowHint)
        QMainWindow.__init__(self, parent)
#        self.setStyleSheet("background-color:  rgb(240, 235, 235); margin: 2px;")
        self.setStyleSheet("background-color:  white; margin: 2px;")
        self.setWindowOpacity(0.9)

#                                    "QLineEdit { border-width: 20px;border-style: solid; border-color: darkblue; };")
        self.setupUi(self)
        self.projectName = projectName
        self.move(10+count*500,  100)

        self.x = 200
        self.pen = QPen()

        self.numPt = PIXEL_OFFSET
        self.isPause = False
        self.NUM_CHANNEL = len(fpgaOutput)
        self.setWindowTitle(projectPath)

        # Search all .bit files, make them selectable 
        sys.path.append(projectPath)
        import os
        print projectPath
        for eachBitFile in sorted(glob(projectPath+"/*.bit"), key=os.path.getmtime, reverse=True): 
#            (filepath, filename) = os.path.split(eachBitFile) 
            self.listWidget.addItem(eachBitFile)
        self.listWidget.setCurrentRow(0)
        self.listWidget.setStyleSheet("background-color:  rgb(220, 235, 235); margin: 2px;")


        # Prepare 
         # Prepare the widgets for each control channel to Fpga
        self.allUserInput = {}
        for (id, name, type, value) in userInput: 
            if name != 'xxx':
                self.allUserInput[name] = CtrlChannel(hostDialog=self, id = id, name=name, type=type, value=value) 

        # VERY important: dynamically connect SIGNAL to SLOT, with curried arguments
        for eachName, eachChan in self.allUserInput.iteritems():
            fn = partial(onNewWireIn, self, eachName) # Customizing onNewWireIn() into channel-specific 
            eachChan.doubleSpinBox.valueChanged.connect(fn)
            eachChan.doubleSpinBox.editingFinished.connect(fn)    
            fn(eachChan.defaultValue)

        # Prepare the widgets for each Display channel 
        self.allFpgaOutput = {}
        for i, (addr, name, visual_gain, type, color) in enumerate(fpgaOutput):
            if name != 'xxx':
                self.allFpgaOutput[name] = ViewChannel(hostDialog=self, name=name, id=i, color = color, addr = addr, type = type)

        for eachName, eachChan in self.allFpgaOutput.iteritems():
            fn = partial(onVisualSlider, self, eachName) # Customizing onNewWireIn() into channel-specific 
            eachChan.slider.valueChanged.connect(fn)    

    def individualWireIn(self, whichCh, value = -1):
        if value == -1: 
            value = self.allUserInput[whichCh].doubleSpinBox.value()         
        self.tellFpga(whichCh, value)
        #self.tellWhichFpga(0, whichCh, value)
        print "board",  whichCh, " is now ", value

    def readParameters(self):        
        for eachName, eachChan in self.allUserInput.iteritems():

            if eachName != 'half_cnt':  # don't mess with simulation speed
                val = eachChan.doubleSpinBox.value()   
                self.individualWireIn(eachName, val)
                print eachName, val


    def plotData(self, data):
        from pylab import plot, show, subplot, title
        from scipy.io import savemat, loadmat
        import numpy as np

        dim = np.shape(data)
        if (data != []):
            forplot = np.array(data)
            i = 0
            for eachName, eachChan in self.allFpgaOutput.iteritems():
                subplot(dim[1], 1, i+1)

                plot(forplot[:, i])
                title(eachName)
                i = i + 1
                #
            show()
            timeTag = time.strftime("%Y%m%d_%H%M%S")
            savemat(self.projectName+"_"+timeTag+".mat", {eachName: forplot[:, i] for i, eachName in enumerate(self.allFpgaOutput)})


    def reportData(self):
        newData = []
        for name, chan in self.allFpgaOutput.iteritems(): # Sweep thru channels coming out of Fpga
            #newData.append(max(-16777216, min(16777216, self.nerfModel.ReadFPGA(chan.addr, chan.type))))  # disable range limitation for spike raster
            newData.append(self.nerfModel.ReadFPGA(chan.addr, chan.type))
#            newData.append(self.nerfModel.ReadFPGA(chan.addr, chan.type))
        return newData


    def newDataIO(self, newData, newSpikeAll = []):
        for (name, ch), pt in zip(self.allFpgaOutput.iteritems(), newData):
            ch.data.appendleft(pt)
            ch.label.setText("%4.6f" % pt)      

        self.spike_all = newSpikeAll

    def onTimeOut(self):
        if (self.isPause):
            return
        size = self.size()
        self.update(QRect(self.x+ 1, 0,size.width() - self.x,size.height()))

        if (self.x < size.width() *0.7):  # display line width adjustment
            self.x = self.x + 1  
        else:
            self.x = PIXEL_OFFSET 

    def onChInGain(self):
        for ch in self.allFpgaOutput:
            ch.vscale = ch.slider.value()* 0.1   

    def paintEvent(self, e):
        """ 
        Overload the standard paintEvent function
        """

        #p = QPainter(self.graphicsView)                         ## our painter
        canvas = QPainter(self)                         ## our painter

        for name, ch in self.allFpgaOutput.iteritems():
            if ch.type == "spike32":
                self.drawRaster(canvas, ch)
            else:
                self.drawPoints(canvas, ch)          ## paint clipped graphics

    def drawRaster(self, gp, ch):           
        size = self.size()
        winScale = size.height()*0.2 + size.height()*0.618/self.NUM_CHANNEL * 4;
        self.pen.setStyle(Qt.SolidLine)
        self.pen.setWidth(1)
        self.pen.setBrush(ch.color)
        self.pen.setCapStyle(Qt.RoundCap)
        self.pen.setJoinStyle(Qt.RoundJoin)
        gp.setPen(self.pen)
        
        yOffset = int(size.height()*0.20 + size.height()*0.818/self.NUM_CHANNEL * ch.id)
        bit_mask = 0x0000001
        ## display the spike rasters
#        print ch.data[0]
        spike_train = int(ch.data[0])
        #print spike_train
        for i in xrange(32):
            ## flexors
            if (bit_mask & spike_train) : ## Ia
                gp.drawLine(self.x-10, yOffset - 32 + i ,\
                                 self.x+10, yOffset - 32 + i)
            bit_mask = bit_mask << 1

    def drawRaster_old(self, gp):
        for spkid, i_mu in zip(self.spike_all,  xrange(len(self.spike_all))):
            spikeSeq = unpack("%d" % len(spkid) + "b", spkid)

            size = self.size()
            winScale = size.height()*0.2 + size.height()*0.618/self.NUM_CHANNEL * 4;
            self.pen.setStyle(Qt.SolidLine)
            self.pen.setWidth(1)
            self.pen.setBrush(Qt.blue)
            self.pen.setCapStyle(Qt.RoundCap)
            self.pen.setJoinStyle(Qt.RoundJoin)
            gp.setPen(self.pen)
            ## display the spike rasters
            for i in xrange(0, len(spikeSeq), 2):
                neuronID = spikeSeq[i+1]
                rawspikes = spikeSeq[i]
                ## flexors
                if (rawspikes & 64) : ## Ia
                    gp.drawLine(self.x-2,(winScale) - 22 + i ,\
                                     self.x, (winScale) -  22 + i)
                if (rawspikes & 128) : ## MN
    #                gp.drawPoint(self.x, (winScale) - 24 - (neuronID/4)   ) 
                    gp.drawLine(self.x-2,(winScale) +22 - (neuronID/4)*0 + i_mu * 15 ,\
                                     self.x, (winScale) + 26 - (neuronID/4) *0 + i_mu * 15)

    def drawPoints(self, qp, ch):
        """ 
        Draw a line between previous and current data points.
        """
        size = self.size()


        #for name, ch in allFpgaOutput.iteritems():
        self.pen.setStyle(Qt.SolidLine)
        self.pen.setWidth(2)
        self.pen.setBrush(ch.color)
        self.pen.setCapStyle(Qt.RoundCap)
        self.pen.setJoinStyle(Qt.RoundJoin)
        qp.setPen(self.pen)


        yOffset = int(size.height()*0.20 + size.height()*0.818/self.NUM_CHANNEL * ch.id)
        y0 = yOffset - ch.data[1] * ch.vscale
        y1 = yOffset - ch.data[0] * ch.vscale

#        print "self.x=",  self.x
#        print "y0=" ,  y0
#        print "y1=" ,  y1
        

        qp.drawLine(self.x - 1 , y0, self.x + 1 , y1)



    def tellFpga(self, chanName, newWireIn):
        ctrl = self.allUserInput[chanName] # Handle of the Tester channel
        ctrl.currValue = newWireIn
        if (ctrl.type == 'int32'):
            bitVal = convertType(floor(newWireIn),  fromType = 'i',  toType = 'I')
        elif (ctrl.type == 'float32'):
            bitVal = convertType(newWireIn, fromType = 'f', toType = 'I')
#        bitVal2 = convertType(0.0, fromType = 'f', toType = 'I')
#        print "bitval2, ",  bitVal2
        self.nerfModel.SendMultiPara(bitVal1 = bitVal, bitVal2=0,  trigEvent = ctrl.id)
        
       

    def tellWhichFpga(self, xemNum, chanName, newWireIn):
        ctrl = self.allUserInput[chanName] # Handle of the Tester channel
        ctrl.currValue = newWireIn
        if (ctrl.type == 'int32'):
            bitVal = convertType(floor(newWireIn),  fromType = 'i',  toType = 'I')
        elif (ctrl.type == 'float32'):
            bitVal = convertType(newWireIn, fromType = 'f', toType = 'I')
        bitVal2 = convertType(0.0, fromType = 'f', toType = 'I') # velocity
        self.nerfModel[xemNum].SendMultiPara(bitVal1 = bitVal, bitVal2=bitVal2,  trigEvent = ctrl.id)


    @pyqtSignature("QString")
    def on_comboBox_activated(self, p0):
        """
        Slot documentation goes here.
        """
        choice = p0
        if choice == "waveform 1":
#            pipeInData = gen_ramp(T = [0.0, 0.1, 0.11, 0.65, 0.66, 16.0], L = [0.0, 0.0, 1.4, 1.4, 0.0, 0.0], FILT = False)
#            pipeInData = gen_ramp(T = [0.0, 0.1, 0.3, 1.0, 1.2, 2.0], L = [0.0, 0.0, 120000.0, 120000.0, 0.0, 0.0], FILT = False)
#            pipeInData = gen_ramp(T = [0.0, 0.1, 0.3, 1.0, 1.2, 2.0], L = [0.0, 0.0, 1.4, 1.4, 0.0, 0.0], FILT = False)
#            pipeInData = gen_ramp(T = [0.0, 0.1, 0.2, 0.3, 1.1, 1.2,1.3, 2.0], L = [0.8, 0.8, 1.4, 0.8, 0.8, 1.4,  0.8,  0.8], FILT = False) # 100ms rise
#            pipeInData = gen_ramp(T = [0.0, 0.1, 0.11, 0.12, 1.1, 1.11,1.12, 2.0], L = [0.8, 0.8, 1.4, 0.8, 0.8, 1.4,  0.8,  0.8], FILT = False) # 10ms rise
#            pipeInData = gen_ramp(T = [0.0, 0.1, 0.2, 0.3, 1.1, 1.2, 1.25,  1.3, 2.0], L = [0.8, 0.8, 1.4, 0.8, 0.8, 1.4,  1.4,  0.8,  0.8], FILT = False)
            
            pipeInData, self.gamma_dyn, self.gamma_sta = self.gen_from_file()
            self.individualWireIn('gamma_sta', float(self.gamma_sta))
            self.individualWireIn('gamma_dyn', float(self.gamma_dyn))
            """ 
            up_pulse, dummy = gen_jerk(xi=1.0,  xf = 1.5,  T = 0.05)
            down_pulse, dummy = gen_jerk(xi=1.5,  xf=1.0,  T=0.05)
            flat_tail = np.array([1.0]*np.floor((1.0-0.1)*1024 + 1))
            pipeInData = np.hstack((up_pulse, down_pulse, flat_tail, up_pulse, down_pulse, flat_tail))
            print len(pipeInData)
            """
#            pipeInData = np.append(p1, flat_tail)
            print pipeInData
            print "waveform 1 fed"
#            pipeInData = gen_sin(F = 1.0, AMP = 100.0,  T = 2.0) 
            
            
        elif choice == "waveform 2":
            print "waveform  fed"
#            pipeInData = spike_train(firing_rate = 10)      
#            pipeInData = gen_sin(F = 0.5, AMP = 5000.0,  BIAS = 5001.0,  T = 2.0) 
#            pipeInData = gen_tri(T = 2.0)
#            pipeInData = gen_sin(F = 1.0, AMP = 0.15,  BIAS = 1.15,  T = 2.0) 
            pipeInData = gen_ramp(T = [0.0, 0.1, 0.3, 0.8, 0.9, 2.0], L = [1.0, 1.0, 1.30, 1.30, 1.0,  1.0], FILT = False)
#            pipeInData = gen_ramp(T = [0.0, 0.1, 0.11, 0.51, 0.52, 1.0, 1.1, 1.11,  1.51, 1.52, 2.0], L = [0.7, 0.7, 1.5, 1.5, 0.7, 0.7, 0.7, 1.5, 1.5, 0.7, 0.7], FILT = False)  # one second repeat
#            pipeInData = gen_ramp(T = [0.0, 0.1, 0.11, 0.51, 0.52, 1.0, 2.0], L = [0.7, 0.7, 1.5, 1.5, 0.7, 0.7, 0.7], FILT = False) # two second repeat

#            pipeInData = gen_ramp(T = [0.0, 0.1, 0.101, 0.121, 0.122, 1.0, 1.1, 1.101,  1.121, 1.122, 2.0], L = [0.8, 0.8, 1.5, 1.5, 0.8, 0.8, 0.8, 1.5, 1.5, 0.8, 0.8], FILT = False)   # 20ms pulse for LLSR
          
 
        elif choice == "waveform 3":
#            pipeInData = gen_tri() 

#            pipeInData = spike_train(firing_rate = 1) 
            print "waveform 3 fed"
            #pipeInData = gen_sin(F = 0.5, AMP = 0.4,  BIAS = 1.0,  T = 2.0) 
            self.j1List=[]
            self.j2List=[]
            self.j3List=[]
            self.j4List=[]
            self.j5List=[]
            self.j6List=[]

#            for line in open('/home/eric/Dropbox/MATLAB/WonJoon_code/matlab_wjsohn/posAllData.txt',  "r").readlines():
#                j1 ,  j2,  j3,  j4,  j5,  j6= line.split('\t')
#                j1 = float(j1)
#                j2 = float(j2)
#                print type(j1)
#                print j1
#                self.j1List.append(j1)   #
#                self.j2List.append(j2)   #
#                self.j3List.append(j3)   #
#                self.j4List.append(j4)   #
#                self.j5List.append(j5)   #
#                self.j6List.append(j6)   #
#
            for line in open('/home/eric/nerf_verilog_eric/source/py/1125_resampled/expt_rampnhold.gd_160.gs_160.rep_5.dev_fpga_resampled.txt',  "r").readlines(): 
                j1, j2 = line.split('\n')
#                j1 = line.splitlines()
                
                j1 = float(j1)
                print type(j1)
                print j1
                
                self.j1List.append(j1)   #
              
            
#            print self.j1List
            
            pipeInData_bf = gen_wave(L=self.j1List,  FILT = False)
            pipeInData = [x for x in pipeInData_bf]


            
            #pipeInData = gen_ramp(T = [0.0, 0.1, 0.2, 0.8, 0.9, 2.0], L = [1.0, 1.0, 1.3, 1.3, 1.0, 1.0], FILT = False)
#            pipeInData = gen_ramp(T = [0.0, 0.4, 1.5, 1.55,  1.6,  2.0], L = [0,  0,  15000, 15000, 0, 0], FILT = False)
#            pipeInData = gen_ramp(T = [0.0, 0.2, 0.25, 1.75,  1.8,  2.0], L = [1.0,  1.0,  5000.0, 5000.0, 1.0, 1.0], FILT = False)  # abrupt rise / fall
#            pipeInData = spike_train(firing_rate = 1000) 

        self.nerfModel.SendPipe(pipeInData)
          




    @pyqtSignature("bool")
    def on_pushButton_toggled(self, checked):
        """
        Pausing the plot, FPGA calculation still continues.
        """
        self.isPause = checked

    @pyqtSignature("bool")
    def on_checkBox_clicked(self, checked):
        """
        Auto-scale
        """
        for name, ch in self.allFpgaOutput.iteritems():
            ch.vscale = 50.0 / (max(ch.data)+1)




    @pyqtSignature("QListWidgetItem*")
    def on_listWidget_itemClicked(self, item):
        """
        item burnt upon clicking the .bit file
        """
        self.nerfModel.BurnBitFile(str(item.text()))


#    @pyqtSignature("QListWidgetItem*")
#      
#    def on_listWidget_itemActivated(self, item):
#        """
#        Default selection of .bit file burnt without clicking burn button
#        """
#        self.nerfModel.BurnBitFile(str(item.text()))
#    
    @pyqtSignature("bool")
    def on_checkBox_2_clicked(self, checked):
        """
        Slot documentation goes here.
        """
        newInput = checked
        print newInput
        self.nerfModel.SendButton(newInput, BUTTON_INPUT_FROM_TRIGGER)
    
  
#       
#    
#    @pyqtSignature("bool")
#    def on_pushButton_extraCN_clicked(self, checked):
#        """
#        Slot documentation goes here.
#        """
#         # dystonia
#        bitVal = convertType(0.0, fromType = 'f', toType = 'I')
#        if (checked): 
#            self.nerfModel.SendMultiPara_TEMP(bitVal1 = bitVal, bitVal2=20000, bitVal3=10000, trigEvent = 9)
#        else:
#            self.nerfModel.SendMultiPara_TEMP(bitVal1 = bitVal, bitVal2=0, bitVal3=0, trigEvent = 9)
#        
    
#    @pyqtSignature("bool")
#    def on_checkBox_3_clicked(self, checked):
#        """
#        healthy person setting. 
#        """
#        # TODO: not implemented yet
#        
#        if checked:
#            self.tellFpga('syn_Ia_gain',  10.0);
#            self.tellFpga('syn_CN_gain',  20.0);
#            self.tellFpga('syn_II_gain',  10.0);
#        else: 
#            self.tellFpga('syn_Ia_gain',  30.0);
#            self.tellFpga('syn_CN_gain',  60.0);
#            self.tellFpga('syn_II_gain',  30.0);
    

    
    @pyqtSignature("bool")
    def on_checkBox_3_clicked(self, checked):
        """
        Slot documentation goes here.
        """
        if checked:
#            whichCh = 'syn_Ia_gain'
#            value = 10.0
#            self.tellFpga(whichCh,  value);
#            print "board",  whichCh, " is now ", value
#
#            whichCh = 'syn_CN_gain'
#            value = 50.0
#            self.tellFpga(whichCh,  value);
#            print "board",  whichCh, " is now ", value
#
#            whichCh = 'syn_II_gain'
#            value = 10.0
#            self.tellFpga(whichCh,  value);
#            print "board",  whichCh, " is now ", value
            tempList = ['syn_Ia_gain','syn_CN_gain','syn_II_gain']
            tempVal = [60.0,0.0,60.0]
            for eachPort,  eachVal in zip(tempList,  tempVal):
                self.tellFpga(eachPort, eachVal)
                print "board",  eachPort, " is now ", eachVal

        else:
#            self.tellFpga('syn_Ia_gain',  60.0);
#            self.tellFpga('syn_CN_gain',  200.0);
#            self.tellFpga('syn_II_gain',  60.0);
#            
            tempList = ['syn_Ia_gain','syn_CN_gain','syn_II_gain']
            tempVal = [60.0,200.0,60.0]
            for eachPort,  eachVal in zip(tempList,  tempVal):
                self.tellFpga(eachPort, eachVal)
                print "board",  eachPort, " is now ", eachVal
                
    def gen_from_file(self):
        input_path = "/home/eric/nerf_verilog_eric/source/py/1125_resampled/"
        conditions = np.loadtxt('conditions.txt')
        gamma_dyn = int(conditions[0])
        gamma_sta = int(conditions[1])
        rep = int(conditions[2])
        found = False
        for i in range(gamma_dyn, 220, 40):
            for j in range(gamma_sta, 220, 40):
                for k in range(rep,20):
                    file_name = "expt_rampnhold.gd_" + str(i) + ".gs_" + str(j) + ".rep_" + str(k) + ".dev_fpga_resampled.txt"
                    if path.exists(input_path + file_name):
                        print file_name
                        x = np.loadtxt(input_path + file_name)
                        found = True
                        file = open('conditions.txt', 'w')
                        if k < 19:
                            file.write(str(i) + '\n' + str(j) + '\n' + str(k + 1) + '\n')
                        elif j < 200:
                            file.write(str(i) + '\n' + str(j + 20) + '\n' + str(0) + '\n')
                        else:
                            file.write(str(i + 20) + '\n' + str(0) + '\n' + str(0) + '\n')
                        file.close()
                    if found:
                        break
                rep = 0
                if found:
                    break
            rep = 0
            gamma_sta = 0
            if found:
                break
        return x, i, j
